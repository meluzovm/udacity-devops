Parameters:
  ProjectName:
    Description: "Name of Project"
    Type: String
    Default: "project2"
  VpcCIDR:
    Description: "CIDR for VPC"
    Type: String
    Default: "10.0.0.0/16"
  PrivateSubnetCIDR1:
    Description: "Private Subnet 1"
    Type: String
    Default: ""
  PrivateSubnetCIDR2:
    Description: "Private Subnet 2"
    Type: String
    Default: ""
  PublicSubnetCIDR1:
    Description: "Public Subnet 1"
    Type: String
    Default: ""
  PublicSubnetCIDR2:
    Description: "Public Subnet 2"
    Type: String
    Default: ""
  EC2InstanceType:
    #two vCPUs and at least 4GB of RAM
    Description: "Type of EC2 instance"
    Type: String
    AllowedValues:
      - "t2.medium"
      - "t3.medium"
      - "t2.large"
      - "t3.large"
    Default: "t2.medium"  
  AmiID:
    #Ubuntu 18
    Description: "Image used for creating of EC2 instance"
    Type: AWS::EC2::Image::Id
    Default: "ami-0b1deee75235aa4bb"

###########################################################
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-vpc"
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:  !Select [ 0, !GetAZs '' ]
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetCIDR1
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-private-subnet-01"
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:  !Select [ 1, !GetAZs '' ]
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetCIDR2
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-private-subnet-02"
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCIDR1
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-public-subnet-01"
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCIDR2
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-public-subnet-02"
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value:  !Sub "${ProjectName}-igw"
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  NatGatewayEIP1:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties: 
      Domain: vpc
  NatGateway1: 
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt NatGatewayEIP1.AllocationId
      SubnetId: !Ref PublicSubnet1
##Private RT      
  PrivateRT1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-private-rt-1"
  PrivateRT2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-private-rt-1"
  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRT1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRT2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
  PrivateRTAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRT1
  PrivateRTAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRT2
##Public RT      
  PublicRT1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-public-rt-1"
  PublicRT2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-public-rt-2"
  PublicRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRT1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRT2
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicRTAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRT1
  PublicRTAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRT2
##IAM
  IamPolicyAllowS3:              
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: allow-readonly-access-to-s3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Action: 's3:Get*'
          Resource: 'arn:aws:s3:::udacity-demo-1/*'
      Roles:
        - !Ref IamRoleEC2
  IamRoleEC2:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
  InstanceProfileWithRolesForEC2:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - !Ref IamRoleEC2  

  LaunchTemplateEC2:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: mmLaunchTemplate
      LaunchTemplateData: 
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfileWithRolesForEC2.Arn
        DisableApiTermination: true
        ImageId: !Ref AmiID
        InstanceType: !Ref EC2InstanceType
        SecurityGroupIds:
        - !Ref SecurityGroupWebServer
        BlockDeviceMappings: 
        # at least 10GB of disk space
        - Ebs:
            VolumeSize: 10
            VolumeType: gp2
            DeleteOnTermination: true
            Encrypted: true
          DeviceName: /dev/xvdcz
        UserData: !Base64 |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://udacity-demo-1/udacity.zip .
          unzip -o udacity.zip
 

## Bastion Host can be activated here:          
##  EC2Instance:
##    Type: AWS::EC2::Instance
##    Properties:
##      SubnetId: !Ref PublicSubnet1
##      SecurityGroupIds:
##        - !Ref SecurityGroupBastion
## #     KeyName: !Ref EC2KeyPair
##      LaunchTemplate: 
##        LaunchTemplateId: !Ref LaunchTemplateEC2
##        Version: !GetAtt LaunchTemplateEC2.LatestVersionNumber
##      Tags:
##        - Key: Name
##          Value: !Sub "${ProjectName}-bastion-ec2"

  SecurityGroupBastion:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "ec2-allow-only-ssh"
      GroupDescription: "Allow port 22 and 80"
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: "-1"
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-Bastion-sg"
  SecurityGroupWebServer:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "ec2-allow-ssh-and-http-from-local"
      GroupDescription: "Allow port 22 and 80 from ALB and Bastion"
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        SourceSecurityGroupId: !Ref SecurityGroupBastion
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !Ref SecurityGroupELB
      SecurityGroupEgress:
      - IpProtocol: "-1"
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-WebServer-sg"
  SecurityGroupELB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "ec2-allow-http-in-and-out-"
      GroupDescription: "Allow port 80"
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-ELB-sg"
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: 
      - !Select [ 0, !GetAZs '' ]
      - !Select [ 1, !GetAZs '' ]
      LaunchTemplate: 
        LaunchTemplateId: !Ref LaunchTemplateEC2
        Version: !GetAtt LaunchTemplateEC2.LatestVersionNumber 
      MaxSize: "4"
      MinSize: "4"
      HealthCheckGracePeriod: 90
      TargetGroupARNs:
        - !Ref ELBTargetGroup
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-asg"
          PropagateAtLaunch: True
  ELB:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: !Sub "${ProjectName}-alb"
      Scheme: "internet-facing"
      Type: "application"
      Subnets: 
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2
      SecurityGroups: 
      - !Ref SecurityGroupELB
      IpAddressType: "ipv4"
  ELBTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/"
      Port: 80
      Protocol: "HTTP"
      HealthCheckPort: "traffic-port"
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      TargetType: "instance"
      Matcher: 
        HttpCode: "200"
      HealthyThresholdCount: 5
      VpcId: !Ref VPC
      Name: !Sub "${ProjectName}-target-group"
      HealthCheckEnabled: true
  HTTPListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref ELB
      Port: 80
      Protocol: "HTTP"
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ELBTargetGroup

Outputs: 
  LoadBalancerURL:
    Description: "Load balancer url"
    Value: !Join
      - ""
      - - "http://"
        - !GetAtt ELB.DNSName
# Bastion host is not used in this template
#  BastionHostIP:
#    Description: IP address of  Bastion Host
#    Value: !GetAtt EC2Instance.PublicIp