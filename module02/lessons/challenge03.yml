##Use the infrastructure we created earlier to build and deploy the following:
##    EC2 Instance: An Amazon Linux 2 EC2 server in the private subnet. Choose the right AMI ID as applicable to your region and thet3.micro instance-type.
##    SecurityGroup: A security group for the server, that allows inbound port 80 access, for future use.
##    IAM Role and InstanceProfile: The IAM Role to allow EC2 Session Manager to access our server. An InstanceProfile will allow passing the IAM role to our server.
##    You will provide input parameters to this script, for future expansion and flexibility.
##    Bonus/Optional: Instead of hard-coding the VPC and Subnet ID, use the import-export feature to cross reference the resources created in Challenge 2.
Parameters:
  VPCId:
    Description: "Imported VPC Id" 
    Type: AWS::EC2::VPC::Id
    Default: "-"
  PrivateSubnetID:
    Description: "Imported parameter for Subnet"    
    Type: AWS::EC2::Subnet::Id
    Default: "-"
  KeyName:
    Description: "KeyPair for connecting to ec2"
    Type: AWS::EC2::KeyPair::KeyName
    Default: "-"
  AmiID: 
    Description: "AMZN Linux 2"
    Type: AWS::EC2::Image::Id
    Default: ami-043097594a7df80ec
Resources:
  myEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref KeyName 
      ImageId: !Ref AmiID
      InstanceType: t3.micro
      IamInstanceProfile: !Ref EC2InstanceProfile
      Monitoring: true
      NetworkInterfaces: 
      - AssociatePublicIpAddress: true
        DeviceIndex: "0"
        GroupSet: 
          - Ref: "SecurityGroupEC2"
        SubnetId: !Ref PrivateSubnetID
      UserData: !Base64 |
        #!/bin/bash -ex
        # put your script here
      Tags:
      - Key: key
        Value: value
  SecurityGroupEC2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "ec2instance-sg"
      GroupDescription:  "Allow http traffic"
      VpcId: !Ref VPCId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80 
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: "-1"
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: sg-ec2instance
  EC2IamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns: 
      - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
  EC2InstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Roles: 
        - !Ref EC2IamRole

Outputs:
  ec2InstanceID:
    Description: Instance ID
    Value: !Ref myEC2Instance