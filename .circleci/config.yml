# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Use a package of configuration called an orb.
commands:
  print_pipeline_id:
    description: "A command to print Circle CI Workflow ID"
    #parameters: 
    steps:
      - run: echo $CIRCLE_WORKFLOW_ID

orbs:
  # Declare a dependency on the welcome-orb
  welcome: circleci/welcome-orb@0.4.1
# Orchestrate or schedule a set of jobs
jobs:
  ex1_print_hello:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run: echo "hello"
      - run: sleep 1
  ex1_print_world:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run: echo "hello"
  ex2_print_name:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run: echo "hello $AUTHORNAME"  
  ex3_save_hello_world_output:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run: echo "hello world!" > /tmp/output.txt
      - persist_to_workspace:
          root: /tmp
          paths:
          - output.txt
  ex3_print_output_file:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - attach_workspace:
          at: /tmp
      - run: cat /tmp/output.txt
  ex4_use_command:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - print_pipeline_id
  ex5_failed_job:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run: return 1
      - run:
          name: "failed"
          command: echo "previous step failed!"
          when: on_fail
  ex6_create_inventory:
    docker:
      - image: amazon/aws-cli
    steps:
      - run: echo "[all]" > inventory.txt
      - run: aws --version
      - run: aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Project,Values=udacity" \
            --output text >> inventory.txt  
      - save_cache:
          key: $CIRCLE_SHA1
          paths:
            - inventory.txt
      - run:
          command: echo "something went wrong"
          when: on_fail  
  ex7_create_infrastructure:
    docker:
      - image: amazon/aws-cli     
    steps:
      - checkout
      - run: echo $CIRCLE_WORKFLOW_ID 
      - run: aws --version
      - run: ls -la
      - run: aws cloudformation create-stack --stack-name my-stack --template-body file://module03-template.yml --parameters file://module03-properties.json 
      - run:
          command: aws cloudformation delete-stack --stack-name my-stack
          when: on_fail 
workflows:
  # Name the workflow "welcome"
  welcome:
    # Run the welcome/run job in its own container
    jobs:
#      - ex1_print_hello
#      - ex1_print_world:
#          requires: 
#            - ex1_print_hello
#      - ex2_print_name:
#          requires: 
#            - ex1_print_world
#      - ex3_save_hello_world_output
#      - ex3_print_output_file:
#          requires:
#            - "ex3_save_hello_world_output"
#
#      - ex4_use_command
#     - ex5_failed_job
#      - ex6_create_inventory
      - ex7_create_infrastructure

